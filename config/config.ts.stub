module.exports = {
    // One authProvider must be defined
    authProviders: {
        // LDAP-based username/password authentication and token signing
        ldap: {
            publicKeyLocation: "/path/to/your/public/key_in_pem_format",
            privateKeyLocation: "/path/to/your/private/key_in_pem_format",
            keyAlgorithm: "RS256",
            issuer: "some_identifier",
            refreshTokenAge: "1w",
			accessTokenAge: "15m",
            // Options to pass through to the LDAP Auth instance
            ldapOptions: {
                url: 'ldap://ldap.address:port',
                searchBase: "dc=example",
                searchFilter: "uid={{username}}",
                starttls: true,
                reconnect: true
            }
        },
        google: {
            clientId: "<CLIENTID>.apps.googleusercontent.com",
            // List of valid domains to accept. If this is empty or undefined, all domains are accepted. Domain specified by "hd" field
            validDomains: ["domain1"],
            //  Set this to true if you want to lookup users by email address instead of sub
			useEmailAsId: false,
            // User lookup table as text file in format <unique user ID> <system user>. If no user lookup is needed, leave this blank
            userLookupTable: "/path/to/user/lookup/table"
        },
        external: {
            issuers: ["valid_issuer_1", "valid_issuer_2"],
            publicKeyLocation: "/path/to/public/key_in_pem_format",
            keyAlgorithm: "RS256",
            // Unique field to be used as username
            uniqueField: "sub",
            // User lookup table as text file in format <authenticated username> <system user>. If no user lookup is needed, leave this blank
            userLookupTable: "/path/to/user/lookup/table"
            // Routes for refreshing access tokens and logging out
            tokenRefreshAddress: "https://my-auth-server.com/refresh/route",
            logoutAddress: "https://my-auth-server.com/api/auth/logout"
        }
    },
    database: {
        url: "mongodb://localhost:27017",
        databaseName: "CARTA"
    },

    // Port to listen on. It is advised to listen on a port other than 80 or 443, behind an SSL proxy
    serverPort: 8000,
    // Public-facing server address
    serverAddress: "https://my-carta-server.com",
    // If you need to optionally specify a different API or dashboard address
    // dashboardAddress: "https://my-other-server.com/dashboard",
	// apiAddress: "https://my-carta-server.com/api"

    // Range of ports to user for backend processes. Effectively limits the number of simultaneous users
    backendPorts: {min: 3002, max: 3500},
    processCommand: "/path/to/carta/backend",
    // The {username} placeholder will be replaced with the username
    rootFolderTemplate: "/path/to/user/root/{username}",
    baseFolderTemplate: "/path/to/user/base/{username}",
    // {pid} will be replaced by the started process ID
    // {datetime} will be replaced by date and time formatted as "YYYYMMDD.h_mm_ss"
    // Note: if you use /var/log/carta for log files, make sure the user running the server has the appropriate permissions
    logFileTemplate: "/var/log/carta/{username}_{datetime}_{pid}.log",
    // Additional arguments to be passed to the backend process, defined as an array of strings
	additionalArgs: ["-threads", "4", "-omp_threads", "4", "-init_exit_after", "30", "-exit_after", "0"],
    killCommand: "/path/to/carta/kill/script",
    // How long to wait before checking whether started process is still running and sending res
    startDelay: 100
};
